<?xml version="1.0" encoding="utf-8"?>
<local:ProcessStep xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:local="clr-namespace:MmapManager.Console.Activity;assembly=MmapManager.Console" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities" xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Text</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Management.Automation</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>MmapManager.Console</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <local:ProcessStep.Implementation>
    <Sequence DisplayName="ProcessStep">
      <Sequence.Variables>
        <Variable x:TypeArguments="x:String" Name="_stepId" />
        <Variable x:TypeArguments="x:String" Name="_stepDescription" />
        <Variable x:TypeArguments="x:String" Name="_stepInstructions" />
        <Variable x:TypeArguments="x:Boolean" Default="False" Name="_isExecuteStep" />
        <Variable x:TypeArguments="x:String" Name="_isExecuteStepAnswer" />
        <Variable x:TypeArguments="x:Boolean" Default="False" Name="_isStepComplete" />
        <Variable x:TypeArguments="x:String" Name="_isStepCompleteAnswer" />
        <Variable x:TypeArguments="x:Boolean" Default="False" Name="_doesPowershellAutomationExist" />
        <Variable x:TypeArguments="x:Boolean" Default="False" Name="_doesDotNetAutomationExist" />
      </Sequence.Variables>
      <Assign>
        <Assign.To>
          <OutArgument x:TypeArguments="x:String">
            <mca:CSharpReference x:TypeArguments="x:String">_stepId</mca:CSharpReference>
          </OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="x:String">
            <mca:CSharpValue x:TypeArguments="x:String">stepId</mca:CSharpValue>
          </InArgument>
        </Assign.Value>
      </Assign>
      <Assign>
        <Assign.To>
          <OutArgument x:TypeArguments="x:String">
            <mca:CSharpReference x:TypeArguments="x:String">_stepDescription</mca:CSharpReference>
          </OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="x:String">
            <mca:CSharpValue x:TypeArguments="x:String">stepDescription</mca:CSharpValue>
          </InArgument>
        </Assign.Value>
      </Assign>
      <Assign>
        <Assign.To>
          <OutArgument x:TypeArguments="x:String">
            <mca:CSharpReference x:TypeArguments="x:String">_stepInstructions</mca:CSharpReference>
          </OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="x:String">
            <mca:CSharpValue x:TypeArguments="x:String">stepInstructions</mca:CSharpValue>
          </InArgument>
        </Assign.Value>
      </Assign>
      <WriteLine>
        <InArgument x:TypeArguments="x:String">
          <mca:CSharpValue x:TypeArguments="x:String">String.Format("\r\n\r\n-----------------\r\nStep id: {0}", stepId)</mca:CSharpValue>
        </InArgument>
      </WriteLine>
      <local:FileExists AutomationExtension="ps1">
        <local:FileExists.AutomationFileExists>
          <OutArgument x:TypeArguments="x:Boolean">
            <mca:CSharpReference x:TypeArguments="x:Boolean">_doesPowershellAutomationExist</mca:CSharpReference>
          </OutArgument>
        </local:FileExists.AutomationFileExists>
        <local:FileExists.StepId>
          <InArgument x:TypeArguments="x:String">
            <mca:CSharpValue x:TypeArguments="x:String">_stepId</mca:CSharpValue>
          </InArgument>
        </local:FileExists.StepId>
      </local:FileExists>
      <If>
        <If.Condition>
          <InArgument x:TypeArguments="x:Boolean">
            <mca:CSharpValue x:TypeArguments="x:Boolean">_doesPowershellAutomationExist</mca:CSharpValue>
          </InArgument>
        </If.Condition>
        <If.Then>
          <While>
            <While.Condition>
              <mca:CSharpValue x:TypeArguments="x:Boolean">!_isStepComplete</mca:CSharpValue>
            </While.Condition>
            <Sequence>
              <WriteLine>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String">String.Format("\r\n---Step description:\r\n{0}\r\n\r\nExecute step? (y/n)", stepDescription)</mca:CSharpValue>
                </InArgument>
              </WriteLine>
              <Assign>
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">
                    <mca:CSharpReference x:TypeArguments="x:String">_isExecuteStepAnswer</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">
                    <mca:CSharpValue x:TypeArguments="x:String">Console.ReadKey().Key.ToString()</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
              <Assign>
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Boolean">
                    <mca:CSharpReference x:TypeArguments="x:Boolean">_isExecuteStep</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Boolean">
                    <mca:CSharpValue x:TypeArguments="x:Boolean">_isExecuteStepAnswer == "Y"</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
              <If>
                <If.Condition>
                  <InArgument x:TypeArguments="x:Boolean">
                    <mca:CSharpValue x:TypeArguments="x:Boolean">_isExecuteStep</mca:CSharpValue>
                  </InArgument>
                </If.Condition>
                <If.Then>
                  <Sequence DisplayName="PowershellAutomation">
                    <local:ExecutePowershellScript>
                      <local:ExecutePowershellScript.ScriptPath>
                        <InArgument x:TypeArguments="x:String">
                          <mca:CSharpValue x:TypeArguments="x:String">String.Format("{0}.ps1", _stepId)</mca:CSharpValue>
                        </InArgument>
                      </local:ExecutePowershellScript.ScriptPath>
                    </local:ExecutePowershellScript>
                    <WriteLine>
                      <InArgument x:TypeArguments="x:String">
                        <mca:CSharpValue x:TypeArguments="x:String">"\r\n\r\nPowershell automation step complete"</mca:CSharpValue>
                      </InArgument>
                    </WriteLine>
                    <Assign>
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:Boolean">
                          <mca:CSharpReference x:TypeArguments="x:Boolean">_isStepComplete</mca:CSharpReference>
                        </OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                      </Assign.Value>
                    </Assign>
                  </Sequence>
                </If.Then>
              </If>
            </Sequence>
          </While>
        </If.Then>
        <If.Else>
          <Sequence>
            <local:FileExists AutomationExtension="dll">
              <local:FileExists.AutomationFileExists>
                <OutArgument x:TypeArguments="x:Boolean">
                  <mca:CSharpReference x:TypeArguments="x:Boolean">_doesDotNetAutomationExist</mca:CSharpReference>
                </OutArgument>
              </local:FileExists.AutomationFileExists>
              <local:FileExists.StepId>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String">_stepId</mca:CSharpValue>
                </InArgument>
              </local:FileExists.StepId>
            </local:FileExists>
            <If>
              <If.Condition>
                <InArgument x:TypeArguments="x:Boolean">
                  <mca:CSharpValue x:TypeArguments="x:Boolean">_doesDotNetAutomationExist</mca:CSharpValue>
                </InArgument>
              </If.Condition>
              <If.Then>
                <While>
                  <While.Condition>
                    <mca:CSharpValue x:TypeArguments="x:Boolean">!_isStepComplete</mca:CSharpValue>
                  </While.Condition>
                  <Sequence>
                    <WriteLine>
                      <InArgument x:TypeArguments="x:String">
                        <mca:CSharpValue x:TypeArguments="x:String">String.Format("\r\n---Step description:\r\n{0}\r\n\r\nExecute step? (y/n)", stepDescription)</mca:CSharpValue>
                      </InArgument>
                    </WriteLine>
                    <Assign>
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">
                          <mca:CSharpReference x:TypeArguments="x:String">_isExecuteStepAnswer</mca:CSharpReference>
                        </OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">
                          <mca:CSharpValue x:TypeArguments="x:String">Console.ReadKey().Key.ToString()</mca:CSharpValue>
                        </InArgument>
                      </Assign.Value>
                    </Assign>
                    <Assign>
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:Boolean">
                          <mca:CSharpReference x:TypeArguments="x:Boolean">_isExecuteStep</mca:CSharpReference>
                        </OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:Boolean">
                          <mca:CSharpValue x:TypeArguments="x:Boolean">_isExecuteStepAnswer == "Y"</mca:CSharpValue>
                        </InArgument>
                      </Assign.Value>
                    </Assign>
                    <If>
                      <If.Condition>
                        <InArgument x:TypeArguments="x:Boolean">
                          <mca:CSharpValue x:TypeArguments="x:Boolean">_isExecuteStep</mca:CSharpValue>
                        </InArgument>
                      </If.Condition>
                      <If.Then>
                        <Sequence DisplayName="DotNetAutomation">
                          <local:ExecuteAssembly>
                            <local:ExecuteAssembly.AssemblyName>
                              <InArgument x:TypeArguments="x:String">
                                <mca:CSharpValue x:TypeArguments="x:String">String.Format("{0}.dll", _stepId)</mca:CSharpValue>
                              </InArgument>
                            </local:ExecuteAssembly.AssemblyName>
                          </local:ExecuteAssembly>
                          <WriteLine>
                            <InArgument x:TypeArguments="x:String">
                              <mca:CSharpValue x:TypeArguments="x:String">"\r\n\r\nDotNet automation step complete"</mca:CSharpValue>
                            </InArgument>
                          </WriteLine>
                          <Assign>
                            <Assign.To>
                              <OutArgument x:TypeArguments="x:Boolean">
                                <mca:CSharpReference x:TypeArguments="x:Boolean">_isStepComplete</mca:CSharpReference>
                              </OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                            </Assign.Value>
                          </Assign>
                        </Sequence>
                      </If.Then>
                    </If>
                  </Sequence>
                </While>
              </If.Then>
              <If.Else>
                <While>
                  <While.Condition>
                    <mca:CSharpValue x:TypeArguments="x:Boolean">!_isStepComplete</mca:CSharpValue>
                  </While.Condition>
                  <Sequence>
                    <WriteLine>
                      <InArgument x:TypeArguments="x:String">
                        <mca:CSharpValue x:TypeArguments="x:String">String.Format("\r\n---Step description:\r\n{0}\r\n\r\nExecute step? (y/n)", stepDescription)</mca:CSharpValue>
                      </InArgument>
                    </WriteLine>
                    <Assign>
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">
                          <mca:CSharpReference x:TypeArguments="x:String">_isExecuteStepAnswer</mca:CSharpReference>
                        </OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">
                          <mca:CSharpValue x:TypeArguments="x:String">Console.ReadKey().Key.ToString()</mca:CSharpValue>
                        </InArgument>
                      </Assign.Value>
                    </Assign>
                    <Assign>
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:Boolean">
                          <mca:CSharpReference x:TypeArguments="x:Boolean">_isExecuteStep</mca:CSharpReference>
                        </OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:Boolean">
                          <mca:CSharpValue x:TypeArguments="x:Boolean">_isExecuteStepAnswer == "Y"</mca:CSharpValue>
                        </InArgument>
                      </Assign.Value>
                    </Assign>
                    <If>
                      <If.Condition>
                        <InArgument x:TypeArguments="x:Boolean">
                          <mca:CSharpValue x:TypeArguments="x:Boolean">_isExecuteStep</mca:CSharpValue>
                        </InArgument>
                      </If.Condition>
                      <If.Then>
                        <Sequence DisplayName="Manual">
                          <WriteLine>
                            <InArgument x:TypeArguments="x:String">
                              <mca:CSharpValue x:TypeArguments="x:String">String.Format("\r\n\r\n---Step instructions:\r\n{0}\r\n\r\nIs step complete? (y/n)", stepInstructions)</mca:CSharpValue>
                            </InArgument>
                          </WriteLine>
                          <Assign>
                            <Assign.To>
                              <OutArgument x:TypeArguments="x:String">
                                <mca:CSharpReference x:TypeArguments="x:String">_isStepCompleteAnswer</mca:CSharpReference>
                              </OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="x:String">
                                <mca:CSharpValue x:TypeArguments="x:String">Console.ReadKey().Key.ToString()</mca:CSharpValue>
                              </InArgument>
                            </Assign.Value>
                          </Assign>
                          <Assign>
                            <Assign.To>
                              <OutArgument x:TypeArguments="x:Boolean">
                                <mca:CSharpReference x:TypeArguments="x:Boolean">_isStepComplete</mca:CSharpReference>
                              </OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="x:Boolean">
                                <mca:CSharpValue x:TypeArguments="x:Boolean">_isStepCompleteAnswer == "Y"</mca:CSharpValue>
                              </InArgument>
                            </Assign.Value>
                          </Assign>
                        </Sequence>
                      </If.Then>
                    </If>
                  </Sequence>
                </While>
              </If.Else>
            </If>
          </Sequence>
        </If.Else>
      </If>
      <sads:DebugSymbol.Symbol>9xBAEmvngTQLYeN+snymIH8yXEM6XGRldlxkZXZlbG9wbWVudFxTYW5kYm94XE1tYXBNYW5cTW1hcE1hbmFnZXJcTW1hcE1hbmFnZXIuQ29uc29sZVxBY3Rpdml0eVxQcm9jZXNzU3RlcC54YW1sXS4D6gIOAgEBMzUzPAIBBTU1NTwCAQQ3NTc8AgEDODU4PAIBAjoFRQ4DAd8ERgVRDgMBxARSBV0OAwGpBF4FYhEDAZsEYwVuGAMB/wNvBegCCgIBBkILQk8DAe0EPQs9WAMB4AROC05YAwHSBEkLSWEDAcUEWgtaWQMBtwRVC1ViAwGqBGAJYIkBAwGcBGMrYzADAZoEZgtmcAMBjQRrC2tQAwGABHILcmgCAQd2CboBEQMB8gK9AQnmAhQCARR6C7kBFgMBgAN4DXhcAwHzAr4BC8kBHgMB1gLKAQvlAhACARV7DX8ZAwHxA4ABDYsBFgMB1gOMAQ2XARYDAbsDmAENuAESAwGBA74BMb4BNgMB8QLBARHBAXIDAeQCxgERxgFWAwHXAs0BEc0BagIBFtEBD5UCFwMByQGYAg/jAhcCASN9EX2rAQMB8gOIAROIAXEDAeQDgwETgwFtAwHXA5QBE5QBbQMByQOPAROPAWgDAbwDmwETmwFgAwGCA58BEbYBHAMBjwPVARGUAhwDAdcB0wET0wFiAwHKAZwCEeICHAIBMZoCE5oCYgIBJKABE6YBMwMBrQOnAROrAR8DAZ8DrAETtQEcAwGQA9YBE9oBHwMByALbARPmARwDAa0C5wET8gEcAwGSAvMBE5MCGAMB2AGdAhOhAh8DAbsBogITrQIcAwGgAa4CE7kCHAMBhQG6AhPhAhgCATKjARmjAXgDAa4DqQEXqQGCAQMBoAOzAT+zAUMDAZ4DrwEZrwFvAwGRA9gBF9gBsQEDAckC4wEZ4wF3AwG7At4BGd4BcwMBrgLvARnvAXMDAaAC6gEZ6gFuAwGTAvYBGfYBZgMB2QH6AReRAiIDAeYBnwIXnwKxAQMBvAGqAhmqAncDAa4BpQIZpQJzAwGhAbYCGbYCcwMBkwGxAhmxAm4DAYYBvQIZvQJmAgEzwQIX3wIiAgFA+wEZgQIxAwGEAoICGYYCJQMB9gGHAhmQAiIDAecBwgIZxgIlAgF3xwIZ0gIiAgFc0wIZ3gIiAgFB/gEf/gF+AwGFAoQCHYQChAEDAfcBjgJFjgJJAwH1AYoCH4oCdQMB6AHEAh3EAsEBAgF4zwIfzwJ9AgFqygIfygJ6AgFd2wIf2wJ6AgFP1gIf1gJ1AgFC</sads:DebugSymbol.Symbol>
    </Sequence>
  </local:ProcessStep.Implementation>
</local:ProcessStep>